@if (Row.IsFooter)
{
    <th class="candygrid-cell @Column.CellCssClass" @attributes="Attributes.Dictionary">
        @if (Column.DataTemplate != null)
        {
            @Column.DataTemplate(new GridCellData(Row, Column, DataItem))
        }
        else if (Column.Aggregate != AggregationFunction.None)
        {
            if (!string.IsNullOrWhiteSpace(TextAlignCssClass))
            {
                <div class="@TextAlignCssClass">
                    @Column.GetFormattedValue(DataItem)
                </div>
            }
            else
            {
                @Column.GetFormattedValue(DataItem)
            }
        }
    </th>
}
else
{
    <td class="candygrid-cell @Column.CellCssClass" @attributes="Attributes.Dictionary">
        @if (Column.DataTemplate != null)
        {
            @Column.DataTemplate(new GridCellData(Row, Column, DataItem))
        }
        else if (HasAutomaticButtons || HasAutomaticCheckbox)
        {
            <div class="d-flex flex-nowrap">
                @if (HasAutomaticButtons)
                {
                    <div class="me-2 flex-shrink-1">
                        <div class="btn-group btn-group-sm candygrid-btn-group-sm"
                             @onclick:stopPropagation="true"
                             @ondblclick:stopPropagation="true">

                            @if (Column.OnDetailsButtonClick != null)
                            {
                                <button class="btn btn-info" type="button" title="Details"
                                        @onclick="e => RaiseOnRowButtonClick(e, GridButtonEventType.DetailsButtonClick)">
                                    <i class="fas fa-ellipsis-h"></i>
                                </button>
                            }

                            @if (Column.OnEditButtonClick != null)
                            {
                                <button class="btn btn-warning" type="button" title="Edit"
                                        @onclick="e => RaiseOnRowButtonClick(e, GridButtonEventType.EditButtonClick)">
                                    <i class="fas fa-pen"></i>
                                </button>
                            }

                            @if (Column.OnDeleteButtonClick != null)
                            {
                                <button class="btn btn-danger " type="button" title="Delete"
                                        @onclick="e => RaiseOnRowButtonClick(e, GridButtonEventType.DeleteButtonClick)">
                                    <i class="fas fa-times"></i>
                                </button>
                            }
                        </div>
                    </div>
                }

                <div class="flex-fill mb-0 me-1">
                    @if (HasAutomaticCheckbox)
                    {
                        <label class="form-check"
                               @onclick:stopPropagation="true"
                               @ondblclick:stopPropagation="true">
                            <input type="checkbox" class="form-check-input" @bind="IsChecked" />
                            <span class="form-check-label">@Column.GetFormattedValue(DataItem)</span>
                        </label>
                    }
                    else
                    {
                        <div class="@TextAlignCssClass">
                            @Column.GetFormattedValue(DataItem)
                        </div>
                    }
                </div>
            </div>
        }
        else
        {
            if (!string.IsNullOrWhiteSpace(TextAlignCssClass))
            {
                <div class="@TextAlignCssClass">
                    @Column.GetFormattedValue(DataItem)
                </div>
            }
            else
            {
                @Column.GetFormattedValue(DataItem)
            }
        }
    </td>
}