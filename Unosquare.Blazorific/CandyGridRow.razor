@implements IDisposable
<CascadingValue Name="Row" Value="this">
    <tr class="@CssClass"
        @ondblclick="e => RaiseOnBodyRowDoubleClick(e)"
        @onclick="e => RaiseOnBodyRowClick(e)">
        @foreach (var col in Parent.Columns)
        {
            <CascadingValue Name="Column" Value="col">
                <CandyGridCell />
            </CascadingValue>
        }
    </tr>
</CascadingValue>
@code {
    private string m_CssClass;

    public string CssClass
    {
        get => m_CssClass;
        set
        {
            m_CssClass = value;
            StateHasChanged();
        }
    }

    public int RowIndex { get; protected set; } = -1;

    [CascadingParameter(Name = nameof(DataItem))]
    public object DataItem { get; protected set; }

    [CascadingParameter(Name = nameof(Parent))]
    internal CandyGrid Parent { get; set; }

    internal void NotifyStateChanged() => StateHasChanged();

    protected void RaiseOnBodyRowDoubleClick(MouseEventArgs e)
    {
        $"EVENT".Log(nameof(CandyGridCell), $"On{nameof(Parent.OnBodyRowDoubleClick)}");
        Parent.OnBodyRowDoubleClick?.Invoke(new GridRowMouseEventArgs(this, e));
    }

    protected void RaiseOnBodyRowClick(MouseEventArgs e)
    {
        $"EVENT".Log(nameof(CandyGridCell), $"On{nameof(Parent.OnBodyRowClick)}");
        Parent.OnBodyRowClick?.Invoke(new GridRowMouseEventArgs(this, e));
    }

    protected override void OnInitialized()
    {
        RowIndex = Parent.AddRow(this);
        base.OnInitialized();
    }

    void IDisposable.Dispose()
    {
        Parent.RemoveRow(this);
    }
}
