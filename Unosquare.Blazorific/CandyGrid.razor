@inherits CandyComponentBase

<CascadingValue Value="@this" Name="Parent">
    @CandyGridColumns

    <div class="@RootCssClass">
        <div class="row mt-2 mb-2">
            <div class="col-lg-4 align-self-center">
                <CandyGridPaginator ButtonCount="5" />
            </div>
            <div class="col-lg-5 align-self-center">
                @if (ToolbarTemplate != null)
                    @ToolbarTemplate(this)
            </div>
            <div class="col-lg-3 align-self-center">
                <CandyGridSearchBox />
            </div>
        </div>

        <div class="@TableContainerCssClass">
            <table class="@TableCssClass">
                <thead class="@TableHeaderCssClass">
                    <tr>
                        @foreach (var col in Columns)
                        {
                            if (col.HeaderTemplate == null)
                            {
                                <CascadingValue Value="col" Name="Column">
                                    <CandyGridColumnHeader />
                                </CascadingValue>
                            }
                            else
                            {
                                <th>
                                    @col.HeaderTemplate(col)
                                </th>
                            }
                        }
                    </tr>
                </thead>
                <tbody>
                    @if (DataItems == null || DataItems.Count == 0)
                    {
                        <tr>
                            <td colspan="@(Columns.Count)">
                                @if (IsLoading)
                                {
                                    if (LoadingRecordsTemplate != null)
                                    {
                                        @LoadingRecordsTemplate(this)
                                    }
                                    else
                                    {
                                        <div class="text-center">
                                            <div class="spinner-border" role="status">
                                                <span class="sr-only">Loading...</span>
                                            </div>
                                        </div>
                                    }
                                }
                                else
                                {
                                    if (EmptyRecordsTemplate != null)
                                    {
                                        @EmptyRecordsTemplate(this)
                                    }
                                    else
                                    {
                                        @EmtyRecordsText;
                                    }
                                }
                            </td>
                        </tr>
                    }
                    else
                    {
                        @foreach (var item in DataItems)
                        {
                            <tr @ondblclick="async (e) => await RaiseOnBodyRowDoubleClick(e, item)"
                                @onclick="async (e) => await RaiseOnBodyRowClick(e, item)">
                                @foreach (var col in Columns)
                                {
                                    <td>
                                        @if (col.DataTemplate != null)
                                        {
                                            @col.DataTemplate(item)
                                        }
                                        else
                                        {
                                        <div class="@col.CssClass">
                                            @{
                                                var showButtonGroup = col.OnDeleteButtonClick.HasDelegate ||
                                                    col.OnDetailsButtonClick.HasDelegate ||
                                                    col.OnEditButtonClick.HasDelegate;
                                            }

                                            @if (showButtonGroup)
                                            {
                                                <div class="btn-group btn-group-sm candygrid-btn-group-sm mr-2 float-left">
                                                    @if (col.OnDetailsButtonClick.HasDelegate)
                                                    {
                                                        <button class="btn btn-info" type="button" title="Details"
                                                                @onclick="async (e) => await RaiseOnRowDetailsButtonClick(col, e, item)">
                                                            <i class="fas fa-ellipsis-h"></i>
                                                        </button>
                                                    }

                                                    @if (col.OnEditButtonClick.HasDelegate)
                                                    {
                                                        <button class="btn btn-warning" type="button" title="Edit"
                                                                @onclick="async (e) => await RaiseOnRowEditButtonClick(col, e, item)">
                                                            <i class="fas fa-pen"></i>
                                                        </button>
                                                    }

                                                    @if (col.OnDeleteButtonClick.HasDelegate)
                                                    {
                                                        <button class="btn btn-danger " type="button" title="Delete"
                                                                @onclick="async (e) => await RaiseOnRowDeleteButtonClick(col, e, item)">
                                                            <i class="fas fa-times"></i>
                                                        </button>
                                                    }
                                                </div>
                                            }

                                            @if (col.OnCellCheckedChanged.HasDelegate)
                                            {
                                                <label class="custom-control custom-checkbox mb-0 float-left mr-1">
                                                    <input type="checkbox" class="custom-control-input"
                                                           @onchange="async (e) => await RaiseOnCellCheckedChanged(col, e, item)">
                                                    <span class="custom-control-label">@col.GetFormattedValue(item)</span>
                                                </label>
                                            }
                                            else
                                            {
                                                <div class="float-left">@col.GetFormattedValue(item)</div>
                                            }
                                        </div>
                                        }
                                    </td>
                                }
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>

        <div class="row mt-2 mb-2">
            <div class="col-lg-4 align-self-center">
                <CandyGridPaginator ButtonCount="5" />
            </div>
            <div class="col-lg-5 align-self-center">
                <CandyGridPageInfo />
            </div>
            <div class="col-lg-3 align-self-center">
                <CandyGridPageSizer />
            </div>
        </div>
    </div>
</CascadingValue>